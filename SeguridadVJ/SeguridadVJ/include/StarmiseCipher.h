#pragma once
#include "Prerequisites.h"

class 
	StarmiseCypher {
public:
	/*
	* @brief Default constructor and destructor.
	*/
	StarmiseCypher () = default;
	~StarmiseCypher () = default;

	/*
	* @brief Perform text permutations simulating what I understood from Wave Function Collapse.
	*/
	std::string 
		WaveFCollapse(const std::string& input, unsigned int seed) {
		int n = input.size();
		std::vector<size_t> index(n);
		
		for (int i = 0; i < n; i++) {
			index[i] = i;
		}

		// Random shuffle with a seed from Mersenne Twister engine.
		std::mt19937 randMT(seed);
		std::shuffle(index.begin(), index.end(), randMT);

		shuffleOrder = index;

		std::string output = input;
		for (int i = 0; i < n; ++i) {
			output[i] = input[index[i]];
		}

		return output;
	}

	/*
	* @brief Undoes the permutation generated by the “WaveFCollapse” method.
	*/
	std::string 
		uncollapseWaveF(const std::string& input) {
		int n = input.size();
		std::string output(n, ' ');

		for (int i = 0; i < n; ++i) {
			output[shuffleOrder[i]] = input[i];
		}

		return output;
	}

	/*
	* @brief Encrypts the input text using the XOR xypher method.
	*/
	std::string
		XORCipher(const std::string& input, const std::string& key) {
		std::string output = input;
		for (int i = 0; i < input.size(); ++i) {
			output[i] = input[i] ^ key[i % key.size()];
		}
		return output;
	}

	/*
	* @brief Encrypts a text by combining XOR + permutation in simplified WFC style.
	* @param input Text to cypher
	* @key Key for XOR
	* @return Encrypted text for the WFC permutation.
	*/
	std::string 
		encrypt(const std::string& input, const std::string& key, unsigned int seed) {
		std::string xorEncrypted = XORCipher(input, key);
		std::string wfcEncrypted = WaveFCollapse(xorEncrypted, seed);
		return wfcEncrypted;
	}

	/*
	* @brief Decodes a text encrypted with XOR + simplified WFC.
	* @param input Encrypted text
	* @key Key used for XOR
	* @return Decoded text
	*/
	std::string 
		decrypt(const std::string& encrypted, const std::string& key) {
		std::string unshuffled = uncollapseWaveF(encrypted);
		std::string decrypted = XORCipher(unshuffled, key);
		return decrypted;
	}

private:
	std::vector<size_t> shuffleOrder; // Random permutation order.
};