#pragma once
#include "Prerequisites.h"

/**
* @class CryptoGenerator
* @brief Generates cryptographically secure passwords, keys, IVs and salts, and provides encryption (hex/Base64) and memory cleaning utilities.
*/
class
CryptoGenerator {
public:
  /**
  * @class Class constructor
  * @brief Initializes the Mersenne Twister engine with seed extracted from
  * std::random_device to guarantee cryptographic entropy.
  */
  CryptoGenerator() {
    std::random_device rd; // Random number generation device with high entropy.
    m_engine.seed(rd()); // Seed of the Mersenne Twister engine with the entropy of the device.
  }

  ~CryptoGenerator() = default;

  /**More actions
  * @brief Generates a random password.
  * @param length Length of the password to generate.
  * @param useUpper Include uppercase letters [A-Z].
  * @param useLower Include lowercase letters [a-z].
  * @param useDigits Include digits [0-9].
  * @param useSymbols Include special symbols.
  * @return std::string Generated password.
  * @throws std::runtime_error If no character type is enabled.
  */
  std::string
  generatePassword(unsigned int length,
                   bool useUpper = true,
                   bool useLower = true,
                   bool useDigits = true,
                   bool useSymbols = false) {
    const std::string uppers = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const std::string lowers = "abcdefghijklmnopqrstuvwxyz";
    const std::string digits = "0123456789";
    const std::string symbols = "!@#$%^&*()-_=+[]{}|;:',.<>?/";

    std::string pool;
    if (useUpper) pool += uppers;
    if (useLower) pool += lowers;
    if (useDigits) pool += digits;
    if (useSymbols) pool += symbols;

    // Check if the pool is empty
    if (pool.empty()) {
      throw std::runtime_error("No character types enabled for password generation.");
    }

    std::uniform_int_distribution<unsigned int> dist(0, static_cast<unsigned int>(pool.size() - 1));
    std::string password;
    password.reserve(length); // Reserve space to avoid reallocations

    for (unsigned int i = 0; i < length; i++) {
      password += pool[dist(m_engine)]; // Selects a random character from the pool.
    }
    return password; // Returns the generated password
  }

  /*
  * @brief Generates a buffer of random bytes.
  * @param numBytes Number of bytes to be generated.
  * @return std::vector<uint8_t> Vector with values in [0x00-0xFF].
  */
  std::vector<uint8_t>
  generateBytes(unsigned int numBytes) {
    std::vector<uint8_t> bytes(numBytes);
    std::uniform_int_distribution<int> dist(0, 255); // Uniform distribution of the range [0x00-0xFF]. 
      
    for (unsigned int i = 0; i < numBytes; ++i) {
      bytes[i] = static_cast<uint8_t>(dist(m_engine)); // Asign a random byte to the vector.
    }
    return bytes; // Retuns the vector of generated bytes.
  }

private:
  std::mt19937 m_engine; ///< Mersenne Twister random number generation engine.
};